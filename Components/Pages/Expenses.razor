@page "/expenses"
@using soulFoodReport.Services
@using System.Linq;

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IExpenseService ExpenseService

<h1>Expnses</h1>

@if (expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div>
        Date: <input type="text" id="movementDateTime" @bind-value="@now" />
        ExpenseType: 
        <select @bind="@ExpType">
            @foreach (var exp in ExpenseTypes)
            {
                <option value="@exp">@exp</option>
            }
        </select>
        Supplies: 
        <select @bind="@Supplies">
            @foreach (var supp in allSupplies)
            {
                <option value="@supp">@supp</option>
            }
        </select>

        Amount : <input type="text" id="amount" @bind-value="@Amount" /> 
        Dscription : <input type="text" id="descr" @bind-value="@Description" /> 
        <button onclick="@AddExpense">Add</button>
        
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Type</th>
                <th>ExpenseType</th>
                <th>Supplies</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in OrderedExpenses)
            {
                <tr>
                    <td>@expense.Date.ToString("dd-MM-yyyy HH:mm:ss")</td>
                    <td>@expense.Type.ToString()</td>
                    <td>@expense.ExpenseType.ToString()</td>
                    <td>@expense.Supplies</td>
                    <td>@expense.Amount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
@using soulFoodReport.Services
    private IEnumerable<IExpense> expenses = Enumerable.Empty<IExpense>(); 

    private IExpense[]? OrderedExpenses => expenses.OrderBy(m => m.Date).ToArray();
    private DateTime now;
    private decimal Amount {get;set;}
    private string ExpType {get;set;}
    private string Supplies {get;set;}
    private string Description {get;set;}
    private string[] ExpenseTypes;
    private string[] allSupplies;

    protected override async Task OnInitializedAsync()
    {
        ReloadExpenses();
        ExpenseTypes = Enum.GetNames<ExpenseType>().ToArray();
        allSupplies = SoulFoodReportConfig.Instance.Supplies;
        ExpType = ExpenseTypes[0];
        Supplies = allSupplies[0];

        now = DateTime.UtcNow;
    }
    protected async Task AddExpense() {
        Console.WriteLine("CreateOpenMovement....");
        await Task.Delay(100);
        var movement = soulFoodReport.Services.Movement.Create(now,Amount,MovementType.Expense,SourceType.Card);
        var expenseType = Enum.Parse<ExpenseType>(ExpType);
        var expense = soulFoodReport.Services.Expense.Create(movement,expenseType,Supplies,Description);
        var expenseStatus = ExpenseService.Add(expense);
        ReloadExpenses();
    }
    private void ReloadExpenses() {
        var startDate = DateOnly.FromDateTime(DateTime.Now);
        expenses = ExpenseService.GetExpenses((startDate.Year,startDate.Month)).ToArray();
        now = DateTime.UtcNow;
    }
}