@page "/movements"
@using soulFoodReport.Services
@using System.Linq;

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IMovementService MovementService

<h1>Movements</h1>

@if (movements == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p> Create new movement </p>
    <div class="bottom-three">
        <span> Date: </span> <input type="text" id="movementDateTime" @bind-value="@now" />
        <span> Cash: </span> <input type="text" id="amount" @bind-value="@cashAmount" /> 
        @if (LatestMovementType == null || LatestMovementType != MovementType.Open) { 
            <button onclick="@CreateOpenMovement">Open</button>
        }
        @if (LatestMovementType == MovementType.Open) { 
            <span> Card: </span> <input type="text" id="cardAmount" @bind-value="@cardAmount" />
            <button onclick="@CreateCloseMovement">Close</button>
        }        
    </div>
    
    <p> Movement Filter </p>

    <div>
        <span> From Date: </span> <input type="text" id="fromDate" @bind-value="@fromDate" />
        <span>To Date: </span> <input type="text" id="toDate" @bind-value="@toDate" />
        <button onclick="@ReloadMovements">Search</button>
    
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Type</th>
                <th>Source</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movement in OrderedMovements)
            {
                <tr>
                    <td>@movement.Date.ToString("dd-MM-yyyy HH:mm:ss")</td>
                    <td>@movement.Type.ToString()</td>
                    <td>@movement.Source.ToString()</td>
                    <td>@movement.Amount</td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
  .bottom-three {
     margin-bottom: 2cm;
  }
</style>

@code {
    private IEnumerable<IMovement> movements = Enumerable.Empty<IMovement>(); 

    private IMovement[] OrderedMovements => movements.OrderBy(m => m.Date).ToArray();
    private DateTime now;
    private MovementType? LatestMovementType => movements.Count() == 0 ? null : OrderedMovements?.Last()?.Type;
    private decimal cashAmount;
    private decimal cardAmount;
    private DateOnly fromDate;
    private DateOnly toDate;

    protected override Task OnInitializedAsync()
    {
        now = DateTime.UtcNow;
        fromDate = new DateOnly(now.Year,now.Month,1);
        toDate = new DateOnly(now.Year,now.Month,DateTime.DaysInMonth(now.Year,now.Month));
        ReloadMovements();
        return Task.CompletedTask;
    }
    protected async Task CreateOpenMovement() {
        Console.WriteLine("CreateOpenMovement....");
        await Task.Delay(100);
        var movement = MovementService.Open(now,cashAmount);
        ReloadMovements();
    }
    protected async Task CreateCloseMovement() {
        Console.WriteLine("CreateCloseMovement....");
        await Task.Delay(100);
        var movement = MovementService.Close(now,cashAmount,cardAmount);
        ReloadMovements();
    }
    protected void ReloadMovements() {
        movements = MovementService.GetMovements(fromDate,toDate).ToArray();
        now = DateTime.UtcNow;
    }
 
}