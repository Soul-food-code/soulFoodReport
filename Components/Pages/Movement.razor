@page "/movements"
@using soulFoodReport.Services
@using System.Linq;

@attribute [StreamRendering]
@rendermode InteractiveServer

@inject IMovementService MovementService

<h1>Movements</h1>
<Modal @ref="modal" />
<ConfirmDialog @ref="dialog" />

@if (movements == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p> Create new movement </p>
    <div class="form-group row">
        <div class="col-2"> <DateInput TValue="DateOnly" @bind-Value="@latestDo" Placeholder="Enter Mov. Date" /> </div>
        <label class="col-1 col-form-label"> Cash </label><div class="col-2"> <CurrencyInput TValue="decimal" Locale="es-ES" @bind-Value="@cashAmount" MinimumFractionDigits="2" EnableMinMax="true" Min="0" Max="4999" Placeholder="Cash amount" />  </div>
        @if (LatestMovementType == null || LatestMovementType != MovementType.Open) {
            <div class="col-1"> <Button Color="ButtonColor.Primary" @onclick="() => CreateOpenMovement()">Open</Button> </div> 
        }
        @if (LatestMovementType == MovementType.Open) { 
            <label class="col-1 col-form-label"> Card: </label> <div class="col-2"> <input type="text" id="cardAmount" @bind-value="@cardAmount" /> </div>
            <div class="col-1"> <Button Color="ButtonColor.Primary" @onclick="() => CreateCloseMovement()">Close</Button> </div>
        }        
    </div>
    
    <p> Movement Filter </p>

    <div>
        <span> From Date: </span> <input type="text" id="fromDate" @bind-value="@fromDate" />
        <span>To Date: </span> <input type="text" id="toDate" @bind-value="@toDate" />
        <button onclick="@ReloadMovements">Search</button>
    
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Type</th>
                <th>Source</th>
                <th>Amount</th>
                <th>-</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movement in OrderedMovements)
            {
                <tr>
                    <td>@movement.Date.ToString("dd-MM-yyyy HH:mm:ss")</td>
                    <td>@movement.Type.ToString()</td>
                    <td>@movement.Source.ToString()</td>
                    <td>@movement.Amount</td>
                    <td><Button Color="ButtonColor.Primary" @onclick="() => EditMovement(movement)">Edit</Button></td>

                </tr>
            }
        </tbody>
    </table>
}

<style>
  .bottom-three {
     margin-bottom: 2cm;
  }
</style>

@code {
    private Modal modal = default!;
    private string? message;
    private IEnumerable<IMovement> movements = Enumerable.Empty<IMovement>(); 

    private IMovement[] OrderedMovements => movements.OrderBy(m => m.Date).ToArray();
    private DateOnly latestDo = DateOnly.FromDateTime(DateTime.Now);
    private MovementType? LatestMovementType => movements.Count() == 0 ? null : OrderedMovements?.Last()?.Type;
    private decimal cashAmount;
    private decimal cardAmount;
    private DateOnly fromDate;
    private DateOnly toDate;
    private ConfirmDialog dialog;
    protected override Task OnInitializedAsync()
    {
        ResetDateTimeToNow();
        fromDate = new DateOnly(latestDo.Year,latestDo.Month,1);
        toDate = new DateOnly(latestDo.Year,latestDo.Month,DateTime.DaysInMonth(latestDo.Year,latestDo.Month));
        ReloadMovements();
        return Task.CompletedTask;
    }
    protected async Task CreateOpenMovement() {
        Console.WriteLine("CreateOpenMovement....");
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to Open the Drawer?",
            message1: $"You are opening it with {cashAmount}",
            message2: "Do you want to proceed?");
        if (confirmation) {    
            await Task.Delay(100);
            var movementDT = GetMovementDT();
            var movement = MovementService.Open(movementDT,cashAmount);
            ReloadMovements();
        }
    }
    protected async Task CreateCloseMovement() {
        Console.WriteLine("CreateCloseMovement....");
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to Close the Drawer?",
            message1: $"You are closing it with cash:{cashAmount} and card:{cardAmount}",
            message2: "Do you want to proceed?");
        if (confirmation) {    
            await Task.Delay(100);
            var movementDT = GetMovementDT();
            var movement = MovementService.Close(movementDT,cashAmount,cardAmount);
            ReloadMovements();
        }
    }
    protected async Task EditMovement(IMovement selectedMovement) {
        var parameters = new Dictionary<string, object>();
        parameters.Add("movement", selectedMovement);
        await modal.ShowAsync<MovementEdit>(title: "Movement Details", parameters: parameters);
    }
    protected void ReloadMovements() {
        movements = MovementService.GetMovements(fromDate,toDate).ToArray();
        ResetDateTimeToNow();
    }
    private void ResetDateTimeToNow() {
        latestDo = DateOnly.FromDateTime(DateTime.Now);
    }
    private TimeOnly CurrentTimeOnly => TimeOnly.FromDateTime(DateTime.Now);
    private DateTime GetMovementDT() =>  latestDo.ToDateTime(CurrentTimeOnly).AddSeconds(DateTime.Now.Second);
}